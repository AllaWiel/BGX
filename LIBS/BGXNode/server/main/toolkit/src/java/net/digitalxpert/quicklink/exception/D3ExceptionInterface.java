/* $Id: //depot/MNS/bgxnetwork/server/main/toolkit/src/java/net/bgx/bgxnetwork/exception/D3ExceptionInterface.java#1 $
 * $DateTime: 2006/03/07 13:52:51 $
 * $Change: 6772 $
 * $Author: grouzintsev $
 */
package net.bgx.bgxnetwork.exception;

import java.util.Locale;

/**
 * Базовый интерфейс для исключений, используемых в системе D3.
 * <p/>
 * Каждое исключение связано с подсистемой или модулем, в котором возникла исключительная ситуация
 * и уникальным в рамках этого модуля кодом этой ситуации.
 * <p/>
 * Также исключение должно возвращать текстовое описание ситуации. Для исключений
 * "пользовательского" уровня должна быть предусмотрена локализованная версия этого описания.
 * <h3>Важно!</h3>
 * На данном этапе метод определения и локализации не спефицирован, но рекомендуется следовать
 * следующим простым правилам:
 * <ul>
 * <li>В качестве кода модуля использовать имя пакета 3-го уровня в верхнем регистре. Например для
 * <i>com.grou.cdrs</i> это <i>CDRS</i></li>
 * <li>В качестве кода ошибки использовать пятизначный цифровой код с лидирующими нулями,
 * если таковые есть. Нумерация внутри модуля свободная, что позволяет использовать разрядность для
 * выделения специфических областей.</li>
 * <li>Локализованные описания ошибок выкладывать в файле <i>errorlist.properties</i> в корневом
 * пакете модуля. В качестве ключа использовать код ошибки, а в качестве значения её описание.
 * Таким образом решаются две задачи: описание ошибок модуля и последующая локализация оного.</li>
 * </ul>
 */
public interface D3ExceptionInterface {
    String getModuleCode();

    String getErrorCode();

    /**
     * Для формирования сообщения используется метод
     * {@link java.text.MessageFormat#format(java.lang.String, java.lang.Object[])}.
     * В качестве паттерна используется значение из <code>errorlist.properties</code>, связанное
     * с кодом ошибки. Ресурс errorlist.properties загружается как обычный
     * {@link java.util.ResourceBundle}.
     * <p/>
     * Если на каком-то этапе формирования сообщения произойдёт ошибка, то используется
     * стандартный механизм формирования сообщения об ошибке.
     *
     * @return сообщение об ошибке.
     */
    String getMessage();

    String getLocalizedMessage(Locale aLocale);

    /**
     * Возвращает "собранное" сообщение вида:<br/>
     * MODULE_CODE-ERROR_CODE:&nbsp;MESSAGE
     *
     * @return "собранное" сообщение.
     */
    String getCompleteMessage();

    /**
     * Возвращает "собранное" и локализованное сообщение вида:<br/>
     * MODULE_CODE-ERROR_CODE:&nbsp;MESSAGE
     *
     * @param aLocale необходимая "локаль".
     * @return "собранное" и локализованное сообщение.
     */
    String getCompleteLocalizedMessage(Locale aLocale);

    /**
     * Возвращает массив аргументов для формирования сообщения.
     * @return массив аргументов или <code>null</code> если не требуется использование аргументов.
     * @see #getMessage()
     */
    Object[] getMessageArguments();
}
